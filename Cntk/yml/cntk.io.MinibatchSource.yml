#YamlMime:PythonReference
api_name: []
items:
- _type: class
  children:
  - cntk.io.MinibatchSource.current_position
  - cntk.io.MinibatchSource.get_checkpoint_state
  - cntk.io.MinibatchSource.is_distributed
  - cntk.io.MinibatchSource.next_minibatch
  - cntk.io.MinibatchSource.restore_from_checkpoint
  - cntk.io.MinibatchSource.stream_info
  - cntk.io.MinibatchSource.stream_infos
  - cntk.io.MinibatchSource.streams
  class: cntk.io.MinibatchSource
  fullName: cntk.io.MinibatchSource
  inheritance:
  - inheritance:
    - type: builtins.object
    type: cntk.cntk_py.MinibatchSource
  langs:
  - python
  module: cntk.io
  name: MinibatchSource
  source:
    id: MinibatchSource
    path: \cntk\io\__init__.py
    remote:
      branch: master
      path: \cntk\io\__init__.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 123
  summary: 'Bases: `cntk.cntk_py.MinibatchSource`








    '
  syntax:
    content: MinibatchSource(self, deserializers, max_samples=18446744073709551615,
      max_sweeps=18446744073709551615, randomization_window_in_chunks=128, randomization_window_in_samples=0,
      trace_level=TraceLevel.Warning, multithreaded_deserializer=False, frame_mode=False,
      truncation_length=0, randomize=None, randomization_window=None, sample_based_randomization_window=None,
      epoch_size=None, distributed_after=None)
    parameters:
    - description: deserializers to be used in the composite reader
      id: deserializers
      type:
      - a single deserializer or a list
    - description: The maximum number of input samples (not 'label samples') the reader
        can produce. After this number has been reached, the reader returns empty
        minibatches on subsequent calls to @cntk.io.MinibatchSource.next_minibatch.
        *max_samples* and *max_sweeps* are mutually exclusive, an exception will be
        raised if both have non-default values. **Important:** Click >>:cntkwiki:`here
        <BrainScript-epochSize-and-Python-epoch_size-in-CNTK>`<< for a description
        of input and label samples.
      id: max_samples
      type:
      - int, defaults to cntk.io.INFINITELY_REPEAT
    - description: The maximum number of of sweeps over the input dataset After this
        number has been reached, the reader returns empty minibatches on subsequent
        calls to func:*next_minibatch*. *max_samples* and *max_sweeps* are mutually
        exclusive, an exception will be raised if both have non-default values.
      id: max_sweeps
      type:
      - int, defaults to cntk.io.INFINITELY_REPEAT
    - description: size of the randomization window in chunks, non-zero value enables
        randomization. *randomization_window_in_chunks* and *randomization_window_in_samples*
        are mutually exclusive, an exception will be raised if both have non-zero
        values.
      id: randomization_window_in_chunks
      type:
      - int, defaults to cntk.io.DEFAULT_RANDOMIZATION_WINDOW_IN_CHUNKS
    - description: size of the randomization window in samples, non-zero value enables
        randomization. *randomization_window_in_chunks* and *randomization_window_in_samples*
        are mutually exclusive, an exception will be raised if both have non-zero
        values.
      id: randomization_window_in_samples
      type:
      - int, defaults to 0
    - description: the output verbosity level, defaults to the current logging verbosity
        level given by `get_trace_level()`.
      id: trace_level
      type:
      - an instance of cntk.logging.TraceLevel
    - description: specifies if the deserialization should be done on a single or
        multiple threads.
      id: multithreaded_deserializer
      type:
      - bool, defaults to False
    - description: switches the frame mode on and off. If the frame mode is enabled
        the input data will be processed as individual frames ignoring all sequence
        information (this option cannot be used for BPTT, an exception will be raised
        if frame mode is enabled and the truncation length is non-zero).
      id: frame_mode
      type:
      - bool, defaults to False
    - description: truncation length in samples, non-zero value enables the truncation
        (only applicable for BPTT, cannot be used in frame mode, an exception will
        be raised if frame mode is enabled and the truncation length is non-zero).
      id: truncation_length
      type:
      - int, defaults to 0
    - description: '!DEPRECATED! please use randomization_window_in_chunks or randomization_window_in_samples
        instead'
      id: randomize
      type:
      - bool, defaults to None
    - description: '!DEPRECATED! please use randomization_window_in_chunks or randomization_window_in_samples
        instead'
      id: randomization_window
      type:
      - int, defaults to None
    - description: '!DEPRECATED! please use randomization_window_in_chunks or randomization_window_in_samples
        instead'
      id: sample_based_randomization_window
      type:
      - bool, defaults to None
    - description: '!DEPRECATED! please use max_samples or max_sweeps instead'
      id: epoch_size
      type:
      - int, defaults to None
  type: Class
  uid: cntk.io.MinibatchSource
- _type: attribute
  class: cntk.io.MinibatchSource
  fullName: cntk.io.MinibatchSource.current_position
  langs:
  - python
  module: cntk.io
  name: current_position
  source:
    id: current_position
    path: null
    remote:
      branch: master
      path: null
      repo: https://github.com/Microsoft/CNTK.git
    startLine: null
  summary: Gets current position in the minibatch source.
  syntax:
    parameters:
    - description: Minibatch position `Dictionary` on the global timeline.
      id: getter
    - description: position returned by the getter
      id: setter
      type:
      - Dictionary
  type: Property
  uid: cntk.io.MinibatchSource.current_position
- _type: method
  class: cntk.io.MinibatchSource
  fullName: cntk.io.MinibatchSource.get_checkpoint_state
  langs:
  - python
  module: cntk.io
  name: get_checkpoint_state
  source:
    id: get_checkpoint_state
    path: \cntk\io\__init__.py
    remote:
      branch: master
      path: \cntk\io\__init__.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 350
  summary: Gets the checkpoint state of the MinibatchSource.
  syntax:
    content: get_checkpoint_state(self)
    parameters:
    - id: self
    return:
      description: A `Dictionary` that has the checkpoint state of the MinibatchSource
      type:
      - cntk.cntk_py.Dictionary
  type: Method
  uid: cntk.io.MinibatchSource.get_checkpoint_state
- _type: attribute
  class: cntk.io.MinibatchSource
  fullName: cntk.io.MinibatchSource.is_distributed
  langs:
  - python
  module: cntk.io
  name: is_distributed
  source:
    id: is_distributed
    path: null
    remote:
      branch: master
      path: null
      repo: https://github.com/Microsoft/CNTK.git
    startLine: null
  summary: Whether the minibatch source is running distributed
  syntax: {}
  type: Property
  uid: cntk.io.MinibatchSource.is_distributed
- _type: method
  class: cntk.io.MinibatchSource
  fullName: cntk.io.MinibatchSource.next_minibatch
  langs:
  - python
  module: cntk.io
  name: next_minibatch
  source:
    id: next_minibatch
    path: \cntk\internal\swig_helper.py
    remote:
      branch: master
      path: \cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 296
  summary: 'Reads a minibatch that contains data for all input streams.  The minibatch
    size is specified in terms of #samples and/or #sequences for the primary input
    stream; value of 0 for #samples/#sequences means unspecified.  In case the size
    is specified in terms of both #sequences and #samples, the smaller of the 2 is
    taken.  An empty map is returned when the MinibatchSource has no more data to
    return.'
  syntax:
    content: next_minibatch()
    parameters:
    - description: number of samples to retrieve for the next minibatch. Must be >
        0. **Important:** Click >>:cntkwiki:`here <BrainScript-minibatchSize-and-Python-minibatch_size_in_samples-in-CNTK>`<<
        for a full description of this parameter.
      id: minibatch_size_in_samples
      type:
      - int
    - description: mapping of `Variable` to `StreamInformation` which will be used
        to convert the returned data.
      id: input_map
      type:
      - dict
    - description: CNTK DeviceDescriptor
      id: device
      type:
      - DeviceDescriptor, defaults to None
    - description: Used for distributed training, indicates into how many partitions
        the source should split the data.
      id: num_data_partitions
    - description: Used for distributed training, indicates data from which partition
        to take.
      id: partition_index
      type:
      - int, defaults to None
    return:
      description: A mapping of `StreamInformation` to @cntk.io.MinibatchData if *input_map*
        was not specified. Otherwise, the returned value will be a mapping of `Variable`
        to class:*MinibatchData*.
      type:
      - cntk.io.MinibatchData
  type: Method
  uid: cntk.io.MinibatchSource.next_minibatch
- _type: method
  class: cntk.io.MinibatchSource
  fullName: cntk.io.MinibatchSource.restore_from_checkpoint
  langs:
  - python
  module: cntk.io
  name: restore_from_checkpoint
  source:
    id: restore_from_checkpoint
    path: \cntk\io\__init__.py
    remote:
      branch: master
      path: \cntk\io\__init__.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 361
  summary: Restores the MinibatchSource state from the specified checkpoint.
  syntax:
    content: restore_from_checkpoint(self, checkpoint)
    parameters:
    - id: self
    - description: checkpoint to restore from
      id: checkpoint
      type:
      - Dictionary
  type: Method
  uid: cntk.io.MinibatchSource.restore_from_checkpoint
- _type: method
  class: cntk.io.MinibatchSource
  fullName: cntk.io.MinibatchSource.stream_info
  langs:
  - python
  module: cntk.io
  name: stream_info
  source:
    id: stream_info
    path: \cntk\io\__init__.py
    remote:
      branch: master
      path: \cntk\io\__init__.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 270
  summary: Gets the description of the stream with given name. Throws an exception
    if there are none or multiple streams with this same name.
  syntax:
    content: stream_info(self, name)
    parameters:
    - id: self
    - description: stream name to fetch
      id: name
      type:
      - str
    return:
      description: '`StreamInformation` The information for the given stream name.'
  type: Method
  uid: cntk.io.MinibatchSource.stream_info
- _type: method
  class: cntk.io.MinibatchSource
  fullName: cntk.io.MinibatchSource.stream_infos
  langs:
  - python
  module: cntk.io
  name: stream_infos
  source:
    id: stream_infos
    path: \cntk\io\__init__.py
    remote:
      branch: master
      path: \cntk\io\__init__.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 247
  summary: Describes the streams this minibatch source produces.
  syntax:
    content: stream_infos(self)
    parameters:
    - id: self
    return:
      description: A list of instances of `StreamInformation`
  type: Method
  uid: cntk.io.MinibatchSource.stream_infos
- _type: attribute
  class: cntk.io.MinibatchSource
  fullName: cntk.io.MinibatchSource.streams
  langs:
  - python
  module: cntk.io
  name: streams
  source:
    id: streams
    path: null
    remote:
      branch: master
      path: null
      repo: https://github.com/Microsoft/CNTK.git
    startLine: null
  summary: Describes the streams 'this' minibatch source produces.
  syntax:
    return:
      description: A *dict* mapping input names to instances of `StreamInformation`
  type: Property
  uid: cntk.io.MinibatchSource.streams
references:
- fullName: cntk.io.MinibatchSource.current_position
  isExternal: false
  name: current_position
  parent: cntk.io.MinibatchSource
  uid: cntk.io.MinibatchSource.current_position
- fullName: cntk.io.MinibatchSource.get_checkpoint_state
  isExternal: false
  name: get_checkpoint_state
  parent: cntk.io.MinibatchSource
  uid: cntk.io.MinibatchSource.get_checkpoint_state
- fullName: cntk.io.MinibatchSource.is_distributed
  isExternal: false
  name: is_distributed
  parent: cntk.io.MinibatchSource
  uid: cntk.io.MinibatchSource.is_distributed
- fullName: cntk.io.MinibatchSource.next_minibatch
  isExternal: false
  name: next_minibatch
  parent: cntk.io.MinibatchSource
  uid: cntk.io.MinibatchSource.next_minibatch
- fullName: cntk.io.MinibatchSource.restore_from_checkpoint
  isExternal: false
  name: restore_from_checkpoint
  parent: cntk.io.MinibatchSource
  uid: cntk.io.MinibatchSource.restore_from_checkpoint
- fullName: cntk.io.MinibatchSource.stream_info
  isExternal: false
  name: stream_info
  parent: cntk.io.MinibatchSource
  uid: cntk.io.MinibatchSource.stream_info
- fullName: cntk.io.MinibatchSource.stream_infos
  isExternal: false
  name: stream_infos
  parent: cntk.io.MinibatchSource
  uid: cntk.io.MinibatchSource.stream_infos
- fullName: cntk.io.MinibatchSource.streams
  isExternal: false
  name: streams
  parent: cntk.io.MinibatchSource
  uid: cntk.io.MinibatchSource.streams
